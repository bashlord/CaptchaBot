//
//  main.cpp
//  CaptchaTranslator
//
//  Created by John Jin Woong Kim on 12/21/16.
//  Copyright Â© 2016 John Jin Woong Kim. All rights reserved.
//
#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
#include <sstream>
using namespace std;

vector<vector<vector<int>>> arr(10, vector<vector<int>>(8, vector<int>(1)));

void init_map(){
    arr[0][0]= {5, 7, 11, 13, 14, 15, 17, 20, 21, 22, 23, 25, 27, 29, 30, 31, 32, 33, 34, 35 };
    arr[0][1]= {3, 5, 7, 11, 13, 14, 15, 17, 18, 20, 21, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35 };
    arr[0][2]= {2, 3, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 24, 25, 26, 27, 28, 29, 35 };
    arr[0][3]= {0, 1, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 24, 25, 26, 27, 28, 29, 35 };
    arr[0][4]= {0, 1, 2, 3, 5, 6, 7, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 24, 25, 26, 27, 28, 29, 35 };
    arr[0][5]= {2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 14, 15, 16, 18, 19, 24, 25, 26, 27, 28, 29, 35 };
    arr[0][6]= {4, 5, 7, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 27, 28, 29, 30, 31, 32, 33, 34, 35 };
    arr[0][7]= {7, 15, 17, 20, 22, 23, 29, 30, 31, 32, 33, 34 };
    arr[1][0]= {3, 5, 11, 13, 14, 15, 17, 20, 21, 22, 23, 25, 27, 28, 30, 31, 32, 33, 34 };
    arr[1][1]= {2, 3, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34 };
    arr[1][2]= {0, 1, 2, 6, 8, 9, 10, 12, 16, 22, 23, 24, 26 };
    arr[1][3]= {0, 1, 10, 18, 29 };
    arr[1][4]= {0, 1, 4, 10, 18, 29 };
    arr[1][5]= {0, 2, 3, 4, 6, 8, 9, 10, 11, 13, 19, 20, 22, 24, 26, 35 };
    arr[1][6]= {2, 3, 4, 6, 7, 8, 9, 11, 12, 13, 16, 17, 19, 20, 22, 23, 24, 26, 27, 28, 30, 31, 32, 33, 34, 35 };
    arr[1][7]= {7, 12, 16, 17, 22, 23, 25, 27, 28, 30, 31, 32, 33, 34 };
    arr[2][0]= {2, 5, 6, 8, 9, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32 };
    arr[2][1]= {0, 1, 2, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32, 33, 34 };
    arr[2][2]= {0, 1, 10, 22, 23, 33, 34 };
    arr[2][3]= {1, 4, 18, 22, 23, 29 };
    arr[2][4]= {1, 4, 18, 20, 22, 29 };
    arr[2][5]= {0, 4, 10, 19, 20, 22, 33, 34, 35 };
    arr[2][6]= {0, 2, 3, 4, 6, 7, 8, 9, 10, 11, 13, 17, 19, 22, 23, 24, 25, 26, 27, 30, 31, 32, 33, 34, 35 };
    arr[2][7]= {2, 3, 7, 8, 9, 11, 12, 13, 17, 22, 23, 24, 25, 26, 27, 30, 31, 32 };
    arr[3][0]= {0, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32 };
    arr[3][1]= {0, 5, 6, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32 };
    arr[3][2]= {4, 8, 23, 31, 33, 34 };
    arr[3][3]= {1, 4, 5, 18, 20, 22, 23, 29, 33, 34 };
    arr[3][4]= {1, 5, 18, 20, 22, 29, 33, 34, 35 };
    arr[3][5]= {3, 4, 5, 7, 8, 11, 19, 31, 33, 34, 35 };
    arr[3][6]= {0, 2, 3, 4, 7, 8, 9, 10, 11, 13, 17, 19, 22, 23, 24, 25, 26, 27, 30, 31, 32 };
    arr[3][7]= {0, 2, 9, 10, 13, 17, 22, 23, 24, 25, 26, 27, 30, 32 };
    arr[4][0]= {0, 5, 6, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32 };
    arr[4][1]= {0, 4, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32 };
    arr[4][2]= {4, 5, 8, 9, 11, 14, 15, 17, 20, 25, 27, 28, 31 };
    arr[4][3]= {1, 3, 6, 8, 11, 14, 15, 17, 18, 20, 22, 23, 25, 27, 28, 29, 32, 33, 34, 35 };
    arr[4][4]= {1, 3, 6, 7, 8, 11, 14, 15, 17, 18, 22, 23, 25, 27, 28, 29, 32, 33, 34, 35 };
    arr[4][5]= {2, 3, 4, 5, 6, 7, 8, 9, 11, 14, 15, 17, 19, 25, 27, 28, 31 };
    arr[4][6]= {0, 2, 4, 5, 9, 10, 13, 17, 19, 22, 23, 24, 25, 26, 27, 28, 30, 31, 32 };
    arr[4][7]= {0, 9, 10, 13, 17, 22, 23, 24, 26, 30, 32 };
    arr[5][0]= {0, 4, 6, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32 };
    arr[5][1]= {0, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 30, 31, 32 };
    arr[5][2]= {6, 8, 9, 20, 27, 31, 35 };
    arr[5][3]= {1, 7, 9, 18, 20, 22, 23, 27, 29, 32, 33, 34, 35 };
    arr[5][4]= {1, 2, 7, 9, 18, 22, 23, 27, 29, 32, 33, 34 };
    arr[5][5]= {2, 3, 4, 6, 8, 11, 16, 19, 31 };
    arr[5][6]= {0, 3, 4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 19, 22, 23, 24, 26, 28, 30, 31, 32 };
    arr[5][7]= {0, 5, 9, 10, 13, 16, 17, 22, 23, 24, 26, 28, 30, 32 };
    arr[6][0]= {0, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32 };
    arr[6][1]= {0, 4, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 35 };
    arr[6][2]= {4, 7, 10, 31, 33, 35 };
    arr[6][3]= {1, 2, 4, 7, 10, 18, 20, 26, 29, 31, 32, 33, 34 };
    arr[6][4]= {1, 2, 4, 10, 18, 20, 23, 26, 27, 29, 31, 32, 33, 34 };
    arr[6][5]= {4, 10, 19, 23, 27, 31, 33 };
    arr[6][6]= {0, 3, 4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 19, 22, 23, 24, 26, 28, 30, 32 };
    arr[6][7]= {0, 3, 4, 5, 6, 8, 9, 10, 11, 13, 16, 17, 22, 23, 24, 26, 28, 30, 32 };
    arr[7][0]= {5, 6, 8, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 24, 26, 27, 30, 32, 35 };
    arr[7][1]= {0, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 33, 35 };
    arr[7][2]= {0, 2, 7, 31, 32, 33 };
    arr[7][3]= {1, 2, 18, 29, 31, 32, 34 };
    arr[7][4]= {1, 18, 20, 26, 29, 31, 32, 34 };
    arr[7][5]= {0, 4, 19, 20, 23, 26, 27, 31, 32, 33 };
    arr[7][6]= {0, 3, 4, 5, 6, 9, 10, 11, 13, 16, 17, 19, 22, 23, 24, 26, 27, 28, 30, 32, 33 };
    arr[7][7]= {3, 5, 6, 8, 9, 10, 11, 12, 13, 16, 17, 22, 23, 24, 26, 28, 30, 32 };
    arr[8][0]= {3, 7, 10, 11, 13, 14, 15, 17, 20, 21, 22, 23, 25, 27, 28, 32, 33, 35 };
    arr[8][1]= {2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 30, 32, 33, 35 };
    arr[8][2]= {0, 2, 5, 6, 8, 9, 12, 16, 19, 24, 26, 30, 32 };
    arr[8][3]= {0, 1, 18, 29, 31, 34 };
    arr[8][4]= {0, 1, 18, 19, 29, 31, 34 };
    arr[8][5]= {0, 3, 4, 5, 6, 8, 9, 11, 13, 19, 20, 23, 24, 26, 30, 32 };
    arr[8][6]= {3, 4, 5, 6, 8, 9, 10, 11, 12, 13, 16, 17, 20, 22, 23, 24, 26, 27, 28, 30, 32, 33 };
    arr[8][7]= {10, 12, 16, 17, 22, 23, 27, 28, 32, 33 };
    arr[9][0]= {2, 7, 10, 11, 13, 14, 15, 17, 20, 21, 22, 23, 25, 27, 32, 33, 35 };
    arr[9][1]= {1, 2, 3, 7, 10, 11, 13, 14, 15, 17, 18, 20, 21, 22, 23, 25, 27, 28, 32, 33, 35 };
    arr[9][2]= {1, 2, 3, 5, 6, 9, 11, 12, 13, 14, 16, 18, 19, 21, 24, 26, 28, 30, 35 };
    arr[9][3]= {0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 13, 14, 16, 18, 19, 21, 24, 26, 28, 29, 30, 31, 34, 35 };
    arr[9][4]= {0, 1, 2, 3, 5, 6, 8, 9, 11, 12, 13, 14, 16, 18, 19, 21, 24, 26, 28, 29, 30, 31, 34, 35 };
    arr[9][5]= {1, 2, 3, 4, 5, 6, 8, 9, 11, 12, 13, 14, 16, 18, 21, 24, 26, 28, 30, 35 };
    arr[9][6]= {1, 2, 4, 10, 12, 14, 16, 17, 18, 20, 21, 22, 27, 28, 32, 33, 35 };
    arr[9][7]= {2, 10, 17, 20, 22, 23, 26, 27, 32, 33 };
}

int charcounts[] = {35, 27, 29, 30, 34, 36, 38, 24, 37, 38, 42, 45, 31, 43, 33, 30, 36, 44, 28, 26, 38, 24, 51, 51, 40, 34, 45, 46, 36, 26, 40, 35, 52, 36, 28, 29};

vector<int> split(string str, char delimiter) {
    vector<int> internal;
    stringstream ss(str); // Turn the string into a stream.
    string tok;
    
    while(getline(ss, tok, delimiter)) {
        internal.push_back( stoi( tok) );
    }
    
    return internal;
}

int main() {
    int rr,cc;
    string rs,cs;
    cin>>rs;
    cin>>cs;
    rr=stoi(rs);
    cc=stoi(cs);
    
    init_map();
    vector<vector<int>> curr_cap;
    curr_cap.resize(5);
    bool debug = false;
    vector<int> pcounts(5);
    for(int r =0; r < 21;r++){
        int cap_index = 0;
        int cap_index_length = 0;
        
        for(int c = 0; c < 60;c++){
            string str;
            cin>>str;
            if( c > 4 ){
                vector<int> omfg;
                omfg = split(str,',');
                //if( omfg[0] < 30&&omfg[1] < 30&&omfg[2] < 30 ){
                if( (omfg[0]+omfg[1]+omfg[2])/3 < 20 ){
                    pcounts[cap_index]++;
                    if(curr_cap[cap_index].size() == 0){
                        //auto it = arr[r-11][(c-(5+cap_index))%8].begin();
                        curr_cap[cap_index] = arr[r-11][(c-(5+cap_index))%8];
                    }else{
                        //cout<<"else >>>>>>>>>>>>>>>>>>>>>>"<<endl;
                        vector<int> check_vals,r_vals;
                        //get the current pixel and all the characters associated with it
                        if(debug) cout<<"r:c r-11:(c-5)%8 "<<r<<":"<<c<<" "<<r-11<<":"<<(c-5)%8<<endl;
                        check_vals = arr[r-11][(c-(5+cap_index))%8];
                        //cout<<"if this prints out then its not seg faulting on line 127"<<endl;
                        //need to iterate through the two and eliminate any characters
                        //cd_i = domain index -> curr_cap[cap_index]
                        //cp_i = pixel index -> check_vals
                        int d_i = 0;
                        int p_i = 0;
                        
                        if(debug) cout<<"SIZES: curr_cap["<<cap_index<<"]/check_vals  "<< curr_cap[cap_index].size()<<"/"<<check_vals.size()<<endl;
                        //cout<<"   pre while curr_cap["<<cap_index<<"]"<<endl;
                        
                        while( d_i < curr_cap[cap_index].size() && p_i < check_vals.size()){
                            if(debug) cout<<"while start: " << d_i<<" "<<p_i<<endl;
                            if( curr_cap[cap_index][d_i] == check_vals[p_i] ){
                                r_vals.push_back( check_vals[p_i] );
                                d_i++;
                                p_i++;
                            }else if( curr_cap[cap_index][d_i] < check_vals[p_i] ){
                                d_i++;
                            }else if( curr_cap[cap_index][d_i] > check_vals[p_i] ){
                                p_i++;
                            }
                        }
                        curr_cap[cap_index] = r_vals;
                        //cout<<endl<<"else <<<<<<<<<<<<<<<<<<<"<<endl;
                    }
                }
                if((c!=13&&c!=22&&c!=31&&c!=40 ))
                    cap_index_length++;
                if(cap_index_length > 7){
                    cap_index++; cap_index_length = 0;
                }//closes black pixel check
            }//closes-> if( c > 4 ){
        }
        cap_index = 0;
        //cout<<endl;
    }
    //cout<<"nigga we made it"<<endl;
    
    //for(int i = 0; i < pcounts.size(); i++)
    //    cout<<pcounts[i]<<" ";
    //cout<< endl;
    for(int i = 0; i < curr_cap.size();i++){
        if(curr_cap[i].size()>1){
            int tem;
            int min = 10000000;
            //cout<<"wtf"<<endl;
            for(int j = 0; j < curr_cap[i].size(); j++){
                //cout<<charcounts[curr_cap[i][j]]+1<<" == "<<pcounts[i]<<endl;
                if( abs((charcounts[curr_cap[i][j]]) - pcounts[i])<min ){
                    min = abs(charcounts[curr_cap[i][j]]+1 - pcounts[i]);
                    tem = j;
                }
            }
            if(curr_cap[i][tem]<10)
                cout<<(char)(curr_cap[i][tem]+48);
            else
                cout<<(char)(curr_cap[i][tem]+55);
        }else{
            if(curr_cap[i][0]<10)
                cout<<(char)(curr_cap[i][0]+48);
            else
                cout<<(char)(curr_cap[i][0]+55);
        }
    }
    
    /*cout<<endl;
     for(int i = 0; i < curr_cap.size();i++){
     for(int a:curr_cap[i]){
     if(a<10)
     cout<<(char)(a+48);
     else
     cout<<(char)(a+55);
     }cout<<endl;
     }*/
    return 0;
}